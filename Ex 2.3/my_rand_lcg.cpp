#include "my_rand_lcg.h"
#include "my_rand_coeff.h"
#include <iostream>

unsigned short const N = 4; //количество старотовых чисел для последовательности псевдослучайных чисел

void my_rand_lcg()
{
	//пользователю предлагается ввести старотовую последовательность для вычисления псевдослучайного ряда чисел
	unsigned short numbers[N], seed = 0, flag = 0, diapason_from = 0, diapason_to = 0; //старотовый массив, сид, флаг (кол-во чисел)
	unsigned short a = 0, c = 0, m = 0; //коэффициенты ЛКМ
	std::cout << "Input four integer numbers (16bit) to form a row for randomize: " << std::endl;
	//заносим в массив numbers старотовые четыре числа с клавиатуры
	for (int i = 0; i < N; i++)
	{
		std::cin >> numbers[i];
	}
	//стартовый сид = это сумма последних четырех чисел массива numbers
	for (int i = 0; i < N; i++)
	{
		seed += numbers[i];
	}
	std::cout << std::endl;
	//здесь пользователь вводит количество выводимых псевдослучайны чисел
	std::cout << "Input number of random row: " << std::endl;
	std::cin >> flag;
	std::cout << std::endl;
	//флаг - это количество выводимых псевдослучайных чисел (вводится с клавиатуры)
	//здесь пользователь вводит диапазон выводимых псевдослучайны чисел
	std::cout << "Input value of diapason of numbers from: ";
	std::cin >> diapason_from;
	std::cout << " to: ";
	std::cin >> diapason_to;
	std::cout << std::endl;
	//цикл с постусловием
	//когда флаг станет нулевы, подсчет чисел и вывод завершится

	//---------------------необязательное улучшение алгоритма
	//чтобы сделать алгоритм еще более случайным, коэффициенты а, с, m будут выбираться для каждого сида "случайно"
	//при помощи отдельно прописанной функции, котороая работает по методу ЛКМ, но с программно заданными коэффициентами

	a = my_rand_coeff();
	c = my_rand_coeff();
	m = my_rand_coeff();

	//недостаток такого подхода: мы не знаем, насколько длинный период получится при заданных "случайно" коэффициентах

	do
	{
		//далее последующий сид ищется через линейный конгруэнтный метод (ЛКМ)
		seed = (seed * a + c) % m;
		//найденный сид заносится в начало массива
		//таким образом, последующие сиды будут "выталкиваться" вперед, заменяя собой старотвые четыре числа,
		//становясь тем самым новыми числами для последующих вычислений псевдослучайного числа
		for (int i = N - 1; i >= 0; i--)
		{
			if (i == 0) //если первый элемент массива, то пишем сид и выходим из цикла
			{
				numbers[i] = seed;
				break;
			}
			numbers[i] = numbers[i - 1]; //выталкиваем числа вперед
		}

		std::cout << seed % (diapason_to - diapason_from + 1) + diapason_from << std::endl;
		flag--;
	} while (flag != 0);
}
